server:
  port: 7003
  error:
    include-message: always

spring:
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/review-db?useUnicode=true&characterEncoding=utf8&autoReconnect=true&serverTimezone=UTC&useSSL=false
#    username: root
#    password: 1111
    hikari:
      initialization-fail-timeout: 60000
  jpa:
    hibernate:
      ddl-auto: update
  cloud:
    stream:
      defaultBinder: rabbit
      default:
        contentType: application/json
      bindings:
        input:
          destination: reviews
          group: reviewsGroup
          consumer:
            maxAttempts: 3
            backOffInitialInterval: 500
            backOffMaxInterval: 1000
            backOffMultiplier: 2.0
      rabbit:
        bindings:
          input:
            consumer:
              autoBindDlq: true
              republishToDlq: true
      kafka:
        bindings:
          input:
            consumer:
              enableDlq: true

logging:
  level:
    root: INFO
    se.magnus: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

---
server:
  port: 80

spring:
  profiles: docker
  datasource:
    url: jdbc:mysql://mysql/review-db
    username: root
    password: rootpwd
---
# 메시지 브로커에서 파티션을 사용하기 위한 속성
spring:
  profiles: streaming_partitioned
  cloud:
    stream:
      bindings:
        input:
          consumer:
            partitioned: true
            instanceCount: 2
---
# 첫 번째 파티션에서 메시지를 소비하기 위한 속성
spring:
  profiles: streaming_instance_0
  cloud:
    stream:
      bindings:
        input:
          consumer:
            instanceIndex: 0
---
# 두 번째 파티션에서 메시지를 소비하기 위한 속성
spring:
  profiles: streaming_instance_1
  cloud:
    stream:
      bindings:
        input:
          consumer:
            instanceIndex: 1

---
spring:
  profiles: prod
  datasource:
    url: jdbc:mysql://172.17.0.1:3306/review-db

logging:
  level:
    root: WARN
    se.magnus: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN