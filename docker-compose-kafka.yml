version: '2.1'
# 확인 docker-compose exec kafka /opt/bitnami/kafka/bin/kafka-topics.sh --list --bootstrap-server localhost:9092
services: # 토픽당 2개의 파티션 사용
  product:
    build: microservices/product-service
    image: my-space/product-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/product.yml
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - SPRING_DATA_MONGODB_USERNAME=${MONGODB_USR}
      - SPRING_DATA_MONGODB_PASSWORD=${MONGODB_PWD}
    volumes:
      - ${PWD}/config-repo:/config-repo
    depends_on:
      - kafka
      - mongodb

  product-p1:
    build: microservices/product-service
    image: my-space/product-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/product.yml
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - SPRING_DATA_MONGODB_USERNAME=${MONGODB_USR}
      - SPRING_DATA_MONGODB_PASSWORD=${MONGODB_PWD}
    volumes:
      - ${PWD}/config-repo:/config-repo
    depends_on:
      - kafka
      - mongodb

  recommendation:
    build: microservices/recommendation-service
    image: my-space/recommendation-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/recommendation.yml
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - SPRING_DATA_MONGODB_USERNAME=${MONGODB_USR}
      - SPRING_DATA_MONGODB_PASSWORD=${MONGODB_PWD}
    volumes:
      - ${PWD}/config-repo:/config-repo
    depends_on:
      - kafka
      - mongodb

  recommendation-p1:
    build: microservices/recommendation-service
    image: my-space/recommendation-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/recommendation.yml
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - SPRING_DATA_MONGODB_USERNAME=${MONGODB_USR}
      - SPRING_DATA_MONGODB_PASSWORD=${MONGODB_PWD}
    volumes:
      - ${PWD}/config-repo:/config-repo
    depends_on:
      - kafka
      - mongodb

  review:
    build: microservices/review-service
    image: my-space/review-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0,kafka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/review.yml
      - SPRING_DATASOURCE_USERNAME=${MYSQL_USR}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_PWD}
    volumes:
      - ${PWD}/config-repo:/config-repo
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started

  review-p1:
    build: microservices/review-service
    image: my-space/review-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1,kafka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/review.yml
      - SPRING_DATASOURCE_USERNAME=${MYSQL_USR}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_PWD}
    volumes:
      - ${PWD}/config-repo:/config-repo
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started

  product-composite:
    build: microservices/product-composite-service
    image: my-space/product-composite-service
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,kafka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/product-composite.yml
    volumes:
      - ${PWD}/config-repo:/config-repo
    depends_on:
      - kafka

#  # 검색 서버
#  eureka:
#    build: cloud/eureka-server
#    mem_limit: 512m
#    networks:
#      - my-network
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker,kafka
##      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
##      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}

  # 에지 서버
  gateway:
    build: cloud/gateway
    image: my-space/gateway
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "8443:8443"
    environment:
      - SPRING_PROFILES_ACTIVE=docker,kafka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/gateway.yml
      - SERVER_SSL_KEY_STORE_PASSWORD=${GATEWAY_TLS_PWD}
    volumes:
      - ${PWD}/config-repo:/config-repo


  # 인증 서버
  auth-server:
    build: cloud/auth-server
    mem_limit: 350m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker,kafka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/auth-server.yml
    volumes:
      - ${PWD}/config-repo:/config-repo

  
#  # 설정 서버
#  config:
#    build: cloud/config
#    mem_limit: 350m
#    networks:
#      - my-network
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker,native
##      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY}
##      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
##      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
#    volumes:
#      - ${PWD}/config-repo:/config-repo

  # $ mongo
  mongodb:
    image: mongo:3.6.9
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "27018:27017"
    command: mongod --smallfiles
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USR}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PWD}
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 20s
      timeout: 5s
      retries: 10

  # $ mysql -uroot -h127.0.0.1 -p
  mysql:
    image: mysql:5.7
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "3307:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PWD}
      - MYSQL_DATABASE=review-db
      - MYSQL_USER=${MYSQL_USR}
      - MYSQL_PASSWORD=${MYSQL_PWD}
    healthcheck:
      test: "/usr/bin/mysql --user=${MYSQL_USR} --password=${MYSQL_PWD} --execute \"SHOW DATABASES;\""
      interval: 20s
      timeout: 5s
      retries: 10

  kafka:
    image: bitnami/kafka:3.7.0
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "9093:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper

  zookeeper:
    image: bitnami/zookeeper:3.9.2
    mem_limit: 350m
    networks:
      - my-network
    ports:
      - "2182:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - KAFKA_ADVERTISED_HOST_NAME=zookeeper

  zipkin:
    image: openzipkin/zipkin:2.12.9
    mem_limit: 512m
    networks:
      - my-network
    environment:
      - STORAGE_TYPE=mem # 추적정보 메모리에 저장
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092 # 호스트 이름
    ports:
      - 9411:9411
    depends_on:
      - kafka

networks:
  my-network:
    name: my-network