version: '2.1'

services:
  product:
    build: microservices/product-service
    image: my-space/product-service
    mem_limit: 512m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/product.yml
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - SPRING_DATA_MONGODB_USERNAME=${MONGODB_USR}
      - SPRING_DATA_MONGODB_PASSWORD=${MONGODB_PWD}
    volumes:
      - ${PWD}/config-repo:/config-repo
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy


  recommendation:
    build: microservices/recommendation-service
    image: my-space/recommendation-service
    mem_limit: 512m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/recommendation.yml
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin
      - SPRING_DATA_MONGODB_USERNAME=${MONGODB_USR}
      - SPRING_DATA_MONGODB_PASSWORD=${MONGODB_PWD}
    volumes:
      - ${PWD}/config-repo:/config-repo
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  review:
    build: microservices/review-service
    image: my-space/review-service
    mem_limit: 512m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/review.yml
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}
      - SPRING_DATASOURCE_USERNAME=${MYSQL_USR}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_PWD}
    volumes:
      - ${PWD}/config-repo:/config-repo
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  product-composite:
    build: microservices/product-composite-service
    image: my-space/product-composite-service
    mem_limit: 512m
    networks:
      - my-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/product-composite.yml
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}
    volumes:
      - ${PWD}/config-repo:/config-repo
    depends_on:
      rabbitmq:
        condition: service_healthy

  #  # 검색 서버
  #  eureka:
  #    build: cloud/eureka-server
  #    mem_limit: 512m
  #    networks:
  #      - my-network
  #    environment:
  #      - SPRING_PROFILES_ACTIVE=docker
  ##      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
  ##      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}

  # 에지 서버
  gateway:
    build: cloud/gateway
    image: my-space/gateway
    mem_limit: 512m
    networks:
      - my-network
    ports:
      - "8443:8443"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/gateway.yml
      - SERVER_SSL_KEY_STORE_PASSWORD=${GATEWAY_TLS_PWD}
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}
    volumes:
      - ${PWD}/config-repo:/config-repo

    # 인증 서버
  auth-server:
    build: cloud/auth-server
    image: my-space/auth-server
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/auth-server.yml
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}
    volumes:
      - ${PWD}/config-repo:/config-repo


#  # 설정 서버(파일 기반의 구성 저장소)
#  config:
#    build: cloud/config
#    image: my-space/config
#    mem_limit: 512m
#    networks:
#      - my-network
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker,native
#    #      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY} # 대칭 암호화 키
#    #      # HTTP 기본 인증
#    #      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
#    #      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
#    volumes: # /config-repo에 접근하면 config-repo 폴더에 접근
#      - ${PWD}/config-repo:/config-repo

  # $ mongo
  mongodb:
    image: mongo:3.6.9
    mem_limit: 512m
    networks:
      - my-network
    ports:
      - "27017:27017"
    command: mongod --smallfiles
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USR}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PWD}
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 20s
      timeout: 5s
      retries: 10

  # $ mysql -uroot -h127.0.0.1 -p
  mysql:
    image: mysql:5.7
    mem_limit: 512m
    networks:
      - my-network
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PWD}
      - MYSQL_DATABASE=review-db
      - MYSQL_USER=${MYSQL_USR}
      - MYSQL_PASSWORD=${MYSQL_PWD}
    healthcheck:
      test: "/usr/bin/mysql --user=${MYSQL_USR} --password=${MYSQL_PWD} --execute \"SHOW DATABASES;\""
      interval: 20s
      timeout: 5s
      retries: 10

  rabbitmq:
    image: rabbitmq:3.7.8-management
    mem_limit: 512m
    networks:
      - my-network
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USR}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PWD}
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 20s
      timeout: 5s
      retries: 10

  zipkin:
    image: openzipkin/zipkin:2.12.9
    mem_limit: 512m
    networks:
      - my-network
    environment:
      - STORAGE_TYPE=mem # 메모리에 추적 정보 저장
      - RABBIT_ADDRESSES=rabbitmq # 호스트 이름
      - RABBIT_USER=${RABBITMQ_USR}
      - RABBIT_PASSWORD=${RABBITMQ_PWD}
    ports:
      - 9411:9411
    depends_on:
      rabbitmq:
        condition: service_healthy

networks:
  my-network:
    name: my-network