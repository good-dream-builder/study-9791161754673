server:
  port: 7000
  error:
    include-message: always

app:
  eureka-username: u
  eureka-password: p
  eureka-server: localhost
  auth-server: localhost

spring:
  application:
    name: product-composite
  cloud:
    stream:
      defaultBinder: rabbit
      default:
        contentType: application/json
      bindings:
        output-products:
          destination: products
          producer:
            required-groups: auditGroup
        output-recommendations:
          destination: recommendations
          producer:
            required-groups: auditGroup
        output-reviews:
          destination: reviews
          producer:
            required-groups: auditGroup
      kafka:
        binder:
          brokers: 127.0.0.1
          defaultBrokerPort: 9092
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  security:
    oauth2:
      resourceserver:
        jwt: # 권한 부여 서버의 jwk-set 엔드포인트
          jwk-set-uri: http://${app.auth}:9999/.well-known/jwks.json

logging:
  level:
    root: INFO
    com.songko: DEBUG
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: TRACE

eureka:
  client:
    serviceUrl:
      defaultZone: "http://${app.eureka-username}:${app.eureka-password}@${app.eureka-server}:8761/eureka/"
    # 이하 시작 시간과 중지된 마이크로서비스 인스턴스의 등록 해제에 걸리는 시간을 최소화하기 위한 것
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5

# 시작 시간을 최소화하기 위한 것
ribbon:
  ServerListRefreshInterval: 5000
  NFLoadBalancerPingInterval: 5

# 스프링 부트 액추에이터 구성
management:
  endpoints:
    web:
      exposure:
        # UP, DOWN 결과뿐만 아니라 의존성에 대한 정보가 포함된 상태 점검 세부 정보를 표시
        include: "*"
  endpoint:
    health:
      #  HTTP를 사용해 모든 엔드포인트를 공개
      show-details: always

api:
  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL

    contact:
      name: Contact
      url: My
      email: me@mail.com

  product-composite:
    get-composite-product:
      description: Returns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Product information
        1. Reviews
        1. Recommendations
        1. Service Addresses
        (technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        1. If no product information is found, a <b>404 - Not Found</b> error will be returned
        1. In no recommendations or reviews are found for a product, a partial response will be returned

    create-composite-product:
      description: Creates a composite product
      notes: |
        # Normal response
        The composite product information posted to the API will be splitted up and stored as separate product-info, recommendation and review entities.

        # Expected error responses
        1. If a product with the same productId as specified in the posted information already exists,
           an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned

    delete-composite-product:
      description: Deletes a product composite
      notes: |
        # Normal response
        Entities for product information, recommendations and reviews related to the specificed productId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non existing product will return <b>200 Ok</b>.

---
server:
  port: 8080

app:
  eureka-server: eureka
  auth-server: auth

spring:
  profiles: docker
  cloud:
    stream:
      kafka:
        binder:
          brokers: kafka
  rabbitmq:
    host: rabbitmq